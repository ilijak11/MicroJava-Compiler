

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* keywords */
terminal PROG, PRINT, READ;					/* builtin func */
terminal WHILE, FOREACH; 					/* loop keyword	*/
terminal IF, ELSE, CONTINUE, BREAK, RETURN;	/* control flow keywords */
terminal CLASS, EXTENDS, NEW; 				/* class keywords */

/* types */
/*terminal INT, CHAR, BOOL;*/
terminal VOID;

/* operators */
terminal INC, DEC, PLUS, MINUS, STAR, DIV, MOD;
terminal REL_EQUAL, REL_NOT_EQUAL, GT, GTE, LT, LTE, AND, OR;
terminal EQUAL;
terminal SEMICOL, COL, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE, ARROW;

/* const */
terminal CONST;
terminal TRUE, FALSE, NULL;  

terminal String IDENT;
terminal Integer NUMERIC_CONST;
terminal String STR_CONST;
terminal Character CHAR_CONST;
/*
nonterminal Program, VarDeclList, MethodDeclList, VarDecl, Type, MethodDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, Addop, Factor, ActualPars, ActualParamList;
nonterminal Matched, Unmatched;

(ClassGlobalDecl) ClassDecl |
*/

nonterminal Prog, GlobalDeclList, GlobalDecl, VarDecl, ConstDecl, VarDecls;
nonterminal Type, Var, Vars, ConstVar, ConstVars, ConstVal;
nonterminal MethodDeclList, MethodDecl, FormalPar, FormalParList, FormalPars;
nonterminal Statement, StatementList, MatchedStatement, UnmatchedStatement, Condition, ConditionTerm, ConditionFactor;
nonterminal Expr, ReturnExpr, AssignOp, RelOp, AddOp, MulOp;

Prog ::= (Prog) PROG IDENT GlobalDeclList LBRACE MethodDeclList RBRACE;

GlobalDeclList ::= (GlobalDecls) GlobalDeclList GlobalDecl |
				   (NoDeclsGlobal) /* epsilon */
				   ;

GlobalDecl ::= 	(GlobalVarDecl) VarDecl |
		  		(GlobalConstDecl) ConstDecl
		  		;
		  		
VarDecl ::= (VarDecl) Type:typeName Vars SEMICOL;

ConstDecl ::= (ConstVarDecl) CONST Type:typeName ConstVars SEMICOL;

Vars ::= (MultiVar) Vars COMMA Var |
		 (SingleVar) Var
		 ;

Var ::= (VarScalar) IDENT:varName |
		(VarArray) IDENT:varName LSQUARE RSQUARE
		;
		
ConstVars ::= (MultiConstVar) ConstVars COMMA ConstVar |
			  (SingleConstVar) ConstVar
			  ;
		
ConstVar ::= (ConstVarScalar) IDENT:varName EQUAL ConstVal;

ConstVal ::= (NumericConst) NUMERIC_CONST |
			 (CharConst) CHAR_CONST |
			 (BoolConstTrue) TRUE |
	     	 (BoolConstFalse) FALSE 
	     	 ;
	     	 
Type ::= (Type) IDENT:typeName;


MethodDeclList ::= (MethodDecls) MethodDeclList MethodDecl |
				   (NoMethods) /* epsilon */
				   ;

VarDecls ::= (VarDeclList) VarDecls VarDecl |
		     (NoVars) /* epsilon */
		     ;

MethodDecl ::= (TypedMethodDecl) Type:retType IDENT:methodName LPAREN FormalPars RPAREN VarDecls LBRACE StatementList RBRACE |
			   (VoidMethodDecl) VOID IDENT:methodName LPAREN FormalPars RPAREN VarDecls LBRACE StatementList RBRACE
			   ;

FormalPars ::= (FormalParams) FormalParList |
				 (NoFormalParams) /*epsilon*/
				 ;

FormalParList ::= (MultiFormalParam) FormalParList COMMA FormalPar |
					(SingleFormalParam) FormalPar
					;

FormalPar ::= (FormalParam) Type:paramType IDENT:paramName;

StatementList ::= (StmtList) StatementList Statement |
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (MatchedStmt) MatchedStatement |
			  (UnmatchedStmt) UnmatchedStatement
			  ;

UnmatchedStatement ::= (UnmatchedIfStmt) IF LPAREN Condition RPAREN Statement |
				       (UnmatchedIfElseStmt) IF LPAREN Condition RPAREN MatchedStatement ELSE UnmatchedStatement
					   ;

MatchedStatement ::= (WhileStmt) WHILE LPAREN Condition RPAREN MatchedStatement |
					 (BreakStmt) BREAK SEMICOL |
					 (ContinueStmt) CONTINUE SEMICOL |
					 (ReturnStmt) RETURN ReturnExpr SEMICOL |
					 (IfElseStmt) IF LPAREN Condition RPAREN MatchedStatement ELSE MatchedStatement |
					 (MultiStmt) LBRACE StatementList RBRACE
					 ;

ReturnExpr ::= (RetExpr) Expr |
			   (NoRetExpr) /* epsilon */
			   ;

Condition ::= (MultiTermCondition) Condition OR ConditionTerm |
			  (SingleTermCondition) ConditionTerm
			  ;

ConditionTerm ::= (MultiFactorTermCondition) ConditionTerm AND ConditionFactor |
				  (SingleFactorTermCondition) ConditionFactor
				  ;
				  
ConditionFactor ::= (MultiFactor) Expr RelOp Expr |
					(SingleFactor) Expr
					;
					
Expr ::= (ExprVar) IDENT:name;

AssignOp ::= (AssignOp) EQUAL;

RelOp ::= (RelOpEqual) REL_EQUAL |
		  (RelOpNotEqual) REL_NOT_EQUAL |
		  (RelOpGT) GT |
		  (RelOpGTE) GTE |
		  (RelOpLT) LT |
		  (RelOpLTE) LTE
		  ;

AddOp ::= (AddOpPlus) PLUS |
		  (AddOpMinus) MINUS
		  ;

MulOp ::= (MulOpTimes) STAR |
		  (MulOpDiv) DIV |
		  (MulOpMod) MOD
		  ;

		
		

