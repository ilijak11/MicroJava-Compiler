

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* keywords */
terminal PROG, PRINT, READ;					/* builtin func */
terminal WHILE, FOREACH; 					/* loop keyword	*/
terminal IF, ELSE, CONTINUE, BREAK, RETURN;	/* control flow keywords */
terminal CLASS, EXTENDS, NEW; 				/* class keywords */

/* types */
/*terminal INT, CHAR, BOOL;*/
terminal VOID;

/* operators */
terminal INC, DEC, PLUS, MINUS, STAR, DIV, MOD;
terminal REL_EQUAL, REL_NOT_EQUAL, GT, GTE, LT, LTE, AND, OR;
terminal EQUAL;
terminal SEMICOL, COL, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE, ARROW;

/* const */
terminal CONST;
terminal TRUE, FALSE, NULL;  

terminal String IDENT;
terminal Integer NUMERIC_CONST;
terminal String STR_CONST;
terminal Character CHAR_CONST;
/*
nonterminal Program, VarDeclList, MethodDeclList, VarDecl, Type, MethodDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, Addop, Factor, ActualPars, ActualParamList;
nonterminal Matched, Unmatched;

(ClassGlobalDecl) ClassDecl |
*/

nonterminal Prog Prog;
nonterminal GlobalDeclList GlobalDeclList;
nonterminal GlobalDecl GlobalDecl;
nonterminal VarDecl VarDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecls VarDecls;
nonterminal Type Type;
nonterminal Var Var;
nonterminal Vars Vars;
nonterminal ConstVar ConstVar;
nonterminal ConstVars ConstVars;
nonterminal ConstVal ConstVal;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal FormalPar FormalPar;
nonterminal FormalParList FormalParList;
nonterminal FormalPars FormalPars;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal MatchedStatement MatchedStatement;
nonterminal UnmatchedStatement UnmatchedStatement;
nonterminal Condition Condition;
nonterminal ConditionTerm ConditionTerm;
nonterminal ConditionFactor ConditionFactor;
nonterminal Expr Expr;
nonterminal ReturnExpr ReturnExpr;
nonterminal AssignOp AssignOp;
nonterminal RelOp RelOp;
nonterminal AddOp AddOp;
nonterminal MulOp MulOp;

Prog ::= (Prog) PROG IDENT:I1 GlobalDeclList:G2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Prog(I1, G2, M3); RESULT.setLine(I1left); :};

GlobalDeclList ::= (GlobalDecls) GlobalDeclList:G1 GlobalDecl:G2 {: RESULT=new GlobalDecls(G1, G2); RESULT.setLine(G1left); :} |
				   (NoDeclsGlobal) {: RESULT=new NoDeclsGlobal(); :} /* epsilon */
				   ;

GlobalDecl ::= 	(GlobalVarDecl) VarDecl:V1 {: RESULT=new GlobalVarDecl(V1); RESULT.setLine(V1left); :} |
		  		(GlobalConstDecl) ConstDecl:C1 {: RESULT=new GlobalConstDecl(C1); RESULT.setLine(C1left); :}
		  		;
		  		
VarDecl ::= (VarDecl) Type:typeName Vars:V1 SEMICOL {: RESULT=new VarDecl(typeName, V1); RESULT.setLine(typeNameleft); :};

ConstDecl ::= (ConstVarDecl) CONST Type:typeName ConstVars:C1 SEMICOL {: RESULT=new ConstVarDecl(typeName, C1); RESULT.setLine(typeNameleft); :};

Vars ::= (MultiVar) Vars:V1 COMMA Var:V2 {: RESULT=new MultiVar(V1, V2); RESULT.setLine(V1left); :} |
		 (SingleVar) Var:V1 {: RESULT=new SingleVar(V1); RESULT.setLine(V1left); :}
		 ;

Var ::= (VarScalar) IDENT:varName {: RESULT=new VarScalar(varName); RESULT.setLine(varNameleft); :} |
		(VarArray) IDENT:varName LSQUARE RSQUARE {: RESULT=new VarArray(varName); RESULT.setLine(varNameleft); :}
		;
		
ConstVars ::= (MultiConstVar) ConstVars:C1 COMMA ConstVar:C2 {: RESULT=new MultiConstVar(C1, C2); RESULT.setLine(C1left); :} |
			  (SingleConstVar) ConstVar:C1 {: RESULT=new SingleConstVar(C1); RESULT.setLine(C1left); :}
			  ;
		
ConstVar ::= (ConstVarScalar) IDENT:varName EQUAL ConstVal:C1 {: RESULT=new ConstVarScalar(varName, C1); RESULT.setLine(varNameleft); :};

ConstVal ::= (NumericConst) NUMERIC_CONST:N1 {: RESULT=new NumericConst(N1); RESULT.setLine(N1left); :} |
			 (CharConst) CHAR_CONST:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :} |
			 (BoolConstTrue) TRUE {: RESULT=new BoolConstTrue(); :} |
	     	 (BoolConstFalse) FALSE {: RESULT=new BoolConstFalse(); :} 
	     	 ;
	     	 
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};


MethodDeclList ::= (MethodDecls) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDecls(M1, M2); RESULT.setLine(M1left); :} |
				   (NoMethods) {: RESULT=new NoMethods(); :} /* epsilon */
				   ;

VarDecls ::= (VarDeclList) VarDecls:V1 VarDecl:V2 {: RESULT=new VarDeclList(V1, V2); RESULT.setLine(V1left); :} |
		     (NoVars) {: RESULT=new NoVars(); :} /* epsilon */
		     ;

MethodDecl ::= (TypedMethodDecl) Type:retType IDENT:methodName LPAREN FormalPars:F1 RPAREN VarDecls:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new TypedMethodDecl(retType, methodName, F1, V2, S3); RESULT.setLine(retTypeleft); :} |
			   (VoidMethodDecl) VOID IDENT:methodName LPAREN FormalPars:F1 RPAREN VarDecls:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new VoidMethodDecl(methodName, F1, V2, S3); RESULT.setLine(methodNameleft); :}
			   ;

FormalPars ::= (FormalParams) FormalParList:F1 {: RESULT=new FormalParams(F1); RESULT.setLine(F1left); :} |
				 (NoFormalParams) {: RESULT=new NoFormalParams(); :} /*epsilon*/
				 ;

FormalParList ::= (MultiFormalParam) FormalParList:F1 COMMA FormalPar:F2 {: RESULT=new MultiFormalParam(F1, F2); RESULT.setLine(F1left); :} |
					(SingleFormalParam) FormalPar:F1 {: RESULT=new SingleFormalParam(F1); RESULT.setLine(F1left); :}
					;

FormalPar ::= (FormalParam) Type:paramType IDENT:paramName {: RESULT=new FormalParam(paramType, paramName); RESULT.setLine(paramTypeleft); :};

StatementList ::= (StmtList) StatementList:S1 Statement:S2 {: RESULT=new StmtList(S1, S2); RESULT.setLine(S1left); :} |
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;

Statement ::= (MatchedStmt) MatchedStatement:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :} |
			  (UnmatchedStmt) UnmatchedStatement:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
			  ;

UnmatchedStatement ::= (UnmatchedIfStmt) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new UnmatchedIfStmt(C1, S2); RESULT.setLine(C1left); :} |
				       (UnmatchedIfElseStmt) IF LPAREN Condition:C1 RPAREN MatchedStatement:M2 ELSE UnmatchedStatement:U3 {: RESULT=new UnmatchedIfElseStmt(C1, M2, U3); RESULT.setLine(C1left); :}
					   ;

MatchedStatement ::= (WhileStmt) WHILE LPAREN Condition:C1 RPAREN MatchedStatement:M2 {: RESULT=new WhileStmt(C1, M2); RESULT.setLine(C1left); :} |
					 (BreakStmt) BREAK SEMICOL {: RESULT=new BreakStmt(); :} |
					 (ContinueStmt) CONTINUE SEMICOL {: RESULT=new ContinueStmt(); :} |
					 (ReturnStmt) RETURN ReturnExpr:R1 SEMICOL {: RESULT=new ReturnStmt(R1); RESULT.setLine(R1left); :} |
					 (IfElseStmt) IF LPAREN Condition:C1 RPAREN MatchedStatement:M2 ELSE MatchedStatement:M3 {: RESULT=new IfElseStmt(C1, M2, M3); RESULT.setLine(C1left); :} |
					 (MultiStmt) LBRACE StatementList:S1 RBRACE {: RESULT=new MultiStmt(S1); RESULT.setLine(S1left); :}
					 ;

ReturnExpr ::= (RetExpr) Expr:E1 {: RESULT=new RetExpr(E1); RESULT.setLine(E1left); :} |
			   (NoRetExpr) {: RESULT=new NoRetExpr(); :} /* epsilon */
			   ;

Condition ::= (MultiTermCondition) Condition:C1 OR ConditionTerm:C2 {: RESULT=new MultiTermCondition(C1, C2); RESULT.setLine(C1left); :} |
			  (SingleTermCondition) ConditionTerm:C1 {: RESULT=new SingleTermCondition(C1); RESULT.setLine(C1left); :}
			  ;

ConditionTerm ::= (MultiFactorTermCondition) ConditionTerm:C1 AND ConditionFactor:C2 {: RESULT=new MultiFactorTermCondition(C1, C2); RESULT.setLine(C1left); :} |
				  (SingleFactorTermCondition) ConditionFactor:C1 {: RESULT=new SingleFactorTermCondition(C1); RESULT.setLine(C1left); :}
				  ;
				  
ConditionFactor ::= (MultiFactor) Expr:E1 RelOp:R2 Expr:E3 {: RESULT=new MultiFactor(E1, R2, E3); RESULT.setLine(E1left); :} |
					(SingleFactor) Expr:E1 {: RESULT=new SingleFactor(E1); RESULT.setLine(E1left); :}
					;
					
Expr ::= (ExprVar) IDENT:name {: RESULT=new ExprVar(name); RESULT.setLine(nameleft); :};

AssignOp ::= (AssignOp) EQUAL {: RESULT=new AssignOp(); :};

RelOp ::= (RelOpEqual) REL_EQUAL {: RESULT=new RelOpEqual(); :} |
		  (RelOpNotEqual) REL_NOT_EQUAL {: RESULT=new RelOpNotEqual(); :} |
		  (RelOpGT) GT {: RESULT=new RelOpGT(); :} |
		  (RelOpGTE) GTE {: RESULT=new RelOpGTE(); :} |
		  (RelOpLT) LT {: RESULT=new RelOpLT(); :} |
		  (RelOpLTE) LTE {: RESULT=new RelOpLTE(); :}
		  ;

AddOp ::= (AddOpPlus) PLUS {: RESULT=new AddOpPlus(); :} |
		  (AddOpMinus) MINUS {: RESULT=new AddOpMinus(); :}
		  ;

MulOp ::= (MulOpTimes) STAR {: RESULT=new MulOpTimes(); :} |
		  (MulOpDiv) DIV {: RESULT=new MulOpDiv(); :} |
		  (MulOpMod) MOD {: RESULT=new MulOpMod(); :}
		  ;

		
		

